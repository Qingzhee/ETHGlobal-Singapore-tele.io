/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/NhatTTb7mne
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"

export function countdown() {
  const [timeLeft, setTimeLeft] = useState(null)
  useEffect(() => {
    const eventEndTime = new Date("2024-12-31T23:59:59").getTime()
    const interval = setInterval(() => {
      const now = new Date().getTime()
      const distance = eventEndTime - now
      if (distance < 0) {
        clearInterval(interval)
        setTimeLeft(null)
        return
      }
      const days = Math.floor(distance / (1000 * 60 * 60 * 24))
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))
      const seconds = Math.floor((distance % (1000 * 60)) / 1000)
      setTimeLeft({ days, hours, minutes, seconds })
    }, 1000)
    return () => clearInterval(interval)
  }, [])
  return (
    <Card className="bg-background rounded-lg border p-6 w-full max-w-md flex flex-col gap-4">
      <div className="flex flex-row items-center justify-between">
        <div className="flex flex-row items-center">
          <div className="bg-muted rounded-full w-8 h-8 flex items-center justify-center">
            <CalendarIcon className="w-5 h-5 text-muted-foreground" />
          </div>
          <h2 className="text-lg font-bold text-center">Countdown to Launch</h2>
        </div>
        <Button
          variant="ghost"
          size="icon"
          className="w-8 h-8 rounded-full hover:bg-muted/50 transition-colors"
          onClick={() => {}}
        >
          <XIcon className="w-4 h-4 text-muted-foreground" />
        </Button>
      </div>
      {timeLeft ? (
        <div className="flex flex-col items-center gap-4">
          <div className="text-4xl font-bold">
            <span>{timeLeft.days}</span>d <span>{timeLeft.hours}</span>h <span>{timeLeft.minutes}</span>m{" "}
            <span>{timeLeft.seconds}</span>s
          </div>
          <Progress
            value={
              (timeLeft.days * 24 * 60 * 60 + timeLeft.hours * 60 * 60 + timeLeft.minutes * 60 + timeLeft.seconds) /
              (31 * 24 * 60 * 60)
            }
          />
          <Link href="#" className="text-primary hover:underline" prefetch={false}>
            View Event Details
          </Link>
        </div>
      ) : (
        <div className="text-center text-muted-foreground">Event has ended.</div>
      )}
    </Card>
  )
}

function CalendarIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  )
}


function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
